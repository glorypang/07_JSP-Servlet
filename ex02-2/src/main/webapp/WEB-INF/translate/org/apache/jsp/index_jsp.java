/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.105
 * Generated at: 2025-05-29 04:24:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/scope/session/loginInfo.jsp", Long.valueOf(1748492530000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <title>JSP - Hello World</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>");
      out.print( "Hello World!" );
      out.write("\r\n");
      out.write("</h1>\r\n");
      out.write("<a href=\"hello-servlet\">Hello Servlet</a>\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("<h3>JSP 기본 요소</h3>\r\n");
      out.write("<ol>\r\n");
      out.write("  <li><a href=\"basic/main.jsp\">JSP 지시어 - include 지시어</a></li>\r\n");
      out.write("  <li><a href=\"basic/currentTime.jsp\">스크립틀릿 태그, 표현식 태그</a></li>\r\n");
      out.write("  <li><a href=\"basic/response_redirect.jsp\">response 내장 객체</a></li>\r\n");
      out.write("  <li><a href=\"basic/out.jsp\">out 내장 객체</a></li>\r\n");
      out.write("  <li><a href=\"basic/divide.jsp\">exception 객체</a></li>\r\n");
      out.write("\r\n");
      out.write("  <li><a href=\"layout/main.jsp\">jsp:include 1</a></li>\r\n");
      out.write("  <li><a href=\"layout/main2.jsp\">jsp:include 2</a></li>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</ol>\r\n");
      out.write("\r\n");
      out.write("<h3>Scope 관련 JSP 내장 객체</h3>\r\n");
      out.write("<ol>\r\n");
      out.write("  <li><a href=\"scope/page/pageContext.jsp\"><b>page scope</b></a></li>\r\n");
      out.write("  <li><a href=\"scope/request/request.jsp\"><b>request scope</b></a></li>\r\n");
      out.write("  <li>\r\n");
      out.write("    <b>session scope</b>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<h3>로그인 정보 보기</h3>\r\n");

    String id = (String) session.getAttribute("userid");
    if (id == null) {
        out.print("로그인이 되어있지 않습니다");

    } else {
        String pw = (String) session.getAttribute("password");
        out.print("사용자 아이디값: " + id + "<br>");
        out.print("사용자 비밀번호값: " + pw + "<br>");
    }

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("    <ul>\r\n");
      out.write("      <li><a href=\"scope/session/login.jsp\">로그인</a></li>\r\n");
      out.write("      <li><a href=\"scope/session/logout.jsp\">로그아웃</a></li>\r\n");
      out.write("    </ul>\r\n");
      out.write("  </li>\r\n");
      out.write("\r\n");
      out.write("  <li>\r\n");
      out.write("    <b>application scope</b>\r\n");
      out.write("    <ul>\r\n");
      out.write("      <li><a href=\"scope/application/count.jsp\">count 증가</a></li>\r\n");
      out.write("      <li><a href=\"scope/application/count_view.jsp\">count 확인</a></li>\r\n");
      out.write("    </ul>\r\n");
      out.write("  </li>\r\n");
      out.write("</ol>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
